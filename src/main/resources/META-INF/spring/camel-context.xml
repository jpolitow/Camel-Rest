<?xml version="1.0" encoding="UTF-8"?>
<!-- Configures the Camel Context-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:cxf="http://camel.apache.org/schema/cxf"
       xmlns:ctx="http://www.springframework.org/schema/context"
       xmlns:jaxrs="http://cxf.apache.org/jaxrs"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
       http://cxf.apache.org/jaxrs http://cxf.apache.org/schemas/jaxrs.xsd
       http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        ">

    <bean id="properties" class="org.apache.camel.component.properties.PropertiesComponent">
        <property name="locations">
            <list>
                <value>classpath:endpoint.properties</value>
                <value>classpath:google.properties</value>
            </list>
        </property>
    </bean>

    <bean id="jsonProvider" class="org.apache.cxf.jaxrs.provider.json.JSONProvider">
        <property name="dropRootElement" value="true" />
    </bean>

    <bean id="groupedExchangeAggregationStrategy" class="org.apache.camel.processor.aggregate.GroupedExchangeAggregationStrategy"/>
    <bean id="headerAggregationStrategy" class="com.pgs.aggregator.HeaderAggregationStrategy"/>

    <bean id="headerFilterStrategy" class="com.pgs.http.HttpHeaderFilterStrategy"/>

    <ctx:component-scan base-package="com.pgs.processor, com.pgs.rest, com.pgs.validation"/>

    <!-- Defined the client endpoint to create the cxf-rs consumer -->
    <cxf:rsServer id="rsServer" address="http://localhost:9090/rest">
        <cxf:providers>
            <!--<ref bean="jsonProvider"/>-->
            <bean class="com.theoryinpractise.halbuilder.jaxrs.JaxRsHalBuilderSupport"/>

        </cxf:providers>
        <cxf:serviceBeans>
            <ref bean="geocodeService"/>
        </cxf:serviceBeans>
        <cxf:features>
            <bean class="org.apache.cxf.feature.LoggingFeature"/>
            <bean class="com.pgs.hal.feature.HalFeature"/>
        </cxf:features>
    </cxf:rsServer>


    <camelContext id="camelContext" xmlns="http://camel.apache.org/schema/spring">
        <dataFormats>
            <json library="Jackson" id="jackson"/>
        </dataFormats>

        <route id="geocodeServiceRoute">
            <from uri="{{endpoint.rest.geocodeService}}"/>
            <log message="ExchangeId: ${exchangeId}"/>

            <!-- input validation -->
            <bean ref="validationProcessor" method="validateInput"/>

            <!-- REST operation routing -->
            <recipientList>
                <simple>direct:${header.operationName}</simple>
            </recipientList>

            <!-- output validation -->
            <bean ref="validationProcessor" method="validateBean"/>

            <!-- validation exception handler -->
            <onException>
                <exception>javax.validation.ValidationException</exception>
                <handled>
                    <constant>true</constant>
                </handled>
                <log message="CamelExceptionCaught: ${property.CamelExceptionCaught}"/>
                <choice>
                    <when>
                        <simple>${property.CamelExceptionCaught} is "javax.validation.ConstraintViolationException"</simple>
                        <bean ref="validationProcessor" method="handleConstraintViolationException"/>
                    </when>
                    <when>
                        <simple>${property.CamelExceptionCaught} is "com.pgs.validation.ResponseConstraintViolationException"</simple>
                        <bean ref="validationProcessor" method="handleResponseConstraintViolationException"/>
                    </when>
                </choice>
            </onException>
        </route>

        <route id="getLocationRoute">
            <from uri="direct:getLocation"/>
            <setHeader headerName="CamelHttpUri">
                <simple>https://maps.googleapis.com/maps/api/geocode/json?address=${header.address}&amp;sensor=false&amp;key={{googlekey}}</simple>
            </setHeader>
            <removeHeaders pattern="*" excludePattern="CamelHttpUri"/>
            <recipientList>
                <simple>https4://somehost?headerFilterStrategy=headerFilterStrategy</simple>
            </recipientList>
            <unmarshal ref="jackson"/>
            <bean ref="geocodeProcessor" method="processLocation"/>
        </route>

        <route id="getLocationInfoRoute">
            <from uri="direct:getLocationInfo"/>
            <setHeader headerName="CamelCopyHeaders">
                <simple>gyms,schools</simple>
            </setHeader>
            <multicast parallelProcessing="true" strategyRef="headerAggregationStrategy">
                <to uri="direct:getSchoolsCount"/>
                <to uri="direct:getGymsCount"/>
            </multicast>
            <bean id="processor" ref="placesProcessor" method="processLocationInfo(${header.gyms}, ${header.schools})"/>
        </route>

        <route id="processPlaceSearchRoute">
            <from uri="direct:processPlaceSearch"/>
            <unmarshal ref="jackson"/>
            <bean ref="placesProcessor" method="getResultsCount"/>
        </route>

        <route id="getSchoolsCountRoute">
            <from uri="direct:getSchoolsCount"/>
            <setHeader headerName="CamelHttpUri">
                <simple>https://maps.googleapis.com/maps/api/place/radarsearch/json?location=${header.lat},${header.lng}&amp;radius=${header.radius}&amp;type=school&amp;key={{googlekey}}</simple>
            </setHeader>
            <removeHeaders pattern="*" excludePattern="CamelHttpUri|CamelCopyHeaders"/>
            <recipientList>
                <simple>https4://somehost?headerFilterStrategy=headerFilterStrategy</simple>
            </recipientList>
            <to uri="direct:processPlaceSearch"/>
            <setHeader headerName="schools">
                <simple>${body}</simple>
            </setHeader>
        </route>

        <route id="getGymsCountRoute">
            <from uri="direct:getGymsCount"/>
            <setHeader headerName="CamelHttpUri">
                <simple>https://maps.googleapis.com/maps/api/place/radarsearch/json?location=${header.lat},${header.lng}&amp;radius=${header.radius}&amp;type=gym&amp;key={{googlekey}}</simple>
            </setHeader>
            <removeHeaders pattern="*" excludePattern="CamelHttpUri|CamelCopyHeaders"/>
            <recipientList>
                <simple>https4://somehost?headerFilterStrategy=headerFilterStrategy</simple>
            </recipientList>
            <setHeader headerName="type">
                <constant>gym</constant>
            </setHeader>
            <to uri="direct:processPlaceSearch"/>
            <setHeader headerName="gyms">
                <simple>${body}</simple>
            </setHeader>
        </route>

    </camelContext>

</beans>
